#!/usr/bin/env bash
# LLM Family Pack - Main CLI Tool
# Version: 3.1.0

set -euo pipefail

# Get script directory and source libraries
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
LIB_DIR="${SCRIPT_DIR}/lib"

# Check if we're running from the installed location
if [[ ! -d "${LIB_DIR}" ]]; then
    # Try to find lib directory relative to script location
    if [[ -d "$(dirname "${SCRIPT_DIR}")/lib" ]]; then
        LIB_DIR="$(dirname "${SCRIPT_DIR}")/lib"
    elif [[ -d "${SCRIPT_DIR}/../lib" ]]; then
        LIB_DIR="${SCRIPT_DIR}/../lib"
    else
        echo "Error: Cannot find lib directory. Please ensure LLM Family Pack is properly installed." >&2
        exit 1
    fi
fi

# Source required libraries
# shellcheck source=lib/common.sh
source "${LIB_DIR}/common.sh" || {
    echo "Error: Cannot load common utilities from ${LIB_DIR}/common.sh" >&2
    exit 1
}

# shellcheck source=lib/model_manager.sh
source "${LIB_DIR}/model_manager.sh" || {
    echo "Error: Cannot load model manager from ${LIB_DIR}/model_manager.sh" >&2
    exit 1
}

# shellcheck source=lib/service_manager.sh
source "${LIB_DIR}/service_manager.sh" || {
    echo "Error: Cannot load service manager from ${LIB_DIR}/service_manager.sh" >&2
    exit 1
}

# shellcheck source=lib/proxy_manager.sh
source "${LIB_DIR}/proxy_manager.sh" || {
    echo "Error: Cannot load proxy manager from ${LIB_DIR}/proxy_manager.sh" >&2
    exit 1
}

# Initialize
init_common

# Usage information
usage() {
    print_header
    cat <<USAGE

A comprehensive CLI for managing LiteLLM proxy and AI models.

USAGE:
    llm <command> [options]

SERVICE COMMANDS:
    start                    Start the LiteLLM proxy service
    stop                     Stop the LiteLLM proxy service  
    restart                  Restart the LiteLLM proxy service
    status                   Show detailed service status
    logs [lines]             Show service logs (default: 50 lines)

MODEL COMMANDS:
    add [alias] [model] [api_base] [max_tokens]
                            Add or update a model configuration
    list                     List all configured models
    change                   Interactively change default model
    delete                   Interactively delete a model
    test [alias] [endpoint]  Test model connectivity

PROXY COMMANDS:
    proxy add <name> <url>   Add a new web proxy
    proxy remove <name>      Remove a web proxy
    proxy list               List all configured proxies
    proxy switch <name>      Switch the active proxy (use 'none' to disable)
    proxy status             Show the current active proxy

CLAUDE INTEGRATION:
    ensure-claude [backing]  Ensure Claude aliases point to backing model
    auto-claude [backing]    Auto-configure Claude aliases from environment

MAINTENANCE COMMANDS:
    doctor                   Run comprehensive diagnostics
    fix                      Fix common configuration issues
    tidy                     Clean up configuration file formatting
    clean-duplicates         Remove duplicate model configurations
    show-config             Display current configuration
    cache clear             Clear uv package cache

OPTIONS:
    -h, --help              Show this help message
    -v, --version           Show version information
    -d, --debug             Enable debug output

EXAMPLES:
    llm start && llm doctor
    llm proxy add myproxy http://user:pass@host:port
    llm proxy switch myproxy
    llm restart

For more information, visit: https://github.com/your-username/llm-family-pack

USAGE
}

# Enhanced error handling for commands
handle_command_error() {
    local exit_code="$1"
    local command="$2"
    
    case "${exit_code}" in
        0) return 0 ;;
        1) log_error "Command '${command}' failed" ;;
        2) log_error "Invalid arguments for command '${command}'" ;;
        130) log_warn "Command '${command}' interrupted by user" ;;
        *) log_error "Command '${command}' failed with exit code ${exit_code}" ;;
    esac
    
    return "${exit_code}"
}

# Enhanced model addition with provider detection
add_model_interactive() {
    local alias="${1:-}"
    local model_id="${2:-}" 
    local api_base="${3:-}"
    local max_tokens="${4:-4096}"
    
    if [[ -z "${alias}" ]] || [[ -z "${model_id}" ]]; then
        echo "Model Addition Wizard"
        print_separator
        
        echo "Available Providers:"
        echo "  1) OpenRouter (default)"
        echo "  2) OpenAI"
        echo "  3) Together AI"
        echo "  4) Fireworks AI" 
        echo "  5) Custom Provider"
        
        local provider
        read -r -p "Select provider [1-5]: " provider
        
        local keyname="OPENROUTER_API_KEY"
        case "${provider}" in
            2) 
                api_base="https://api.openai.com/v1"
                keyname="OPENAI_API_KEY"
                ;;
            3) 
                api_base="https://api.together.xyz/v1"
                keyname="TOGETHERAI_API_KEY"
                ;;
            4) 
                api_base="https://api.fireworks.ai/inference/v1"
                keyname="FIREWORKS_API_KEY"
                ;;
            5) 
                read -r -p "Enter custom API base URL: " api_base
                validate_url "${api_base}"
                keyname="OPENAI_API_KEY"
                ;;
            *) 
                api_base="https://openrouter.ai/api/v1"
                keyname="OPENROUTER_API_KEY"
                ;;
        esac
        
        read -r -p "Enter alias name (e.g., 'gpt-4', 'sonnet 4'): " alias
        validate_not_empty "alias" "${alias}"
        
        read -r -p "Enter model ID (e.g., 'gpt-4', 'qwen/qwen3-coder'): " model_id
        validate_not_empty "model_id" "${model_id}"
        
        read -r -p "Enter max tokens [${max_tokens}]: " input_tokens
        max_tokens="${input_tokens:-${max_tokens}}"
        
        # Check for API key
        if ! get_config_value "${keyname}" >/dev/null || [[ -z "$(get_config_value "${keyname}")" ]]; then
            echo
            log_warn "API key ${keyname} is not configured"
            read -r -s -p "Enter your API key: " api_key
            echo
            
            if [[ -n "${api_key}" ]]; then
                set_config_value "${keyname}" "${api_key}"
                log_info "API key saved securely"
            else
                log_warn "No API key provided - you may need to configure it later"
            fi
        fi
    fi
    
    # Normalize alias
    local normalized_alias
    normalized_alias="$(normalize_alias "${alias}")"
    
    # Add the model
    append_or_replace_alias "${normalized_alias}" "${model_id}" "${api_base}" "${max_tokens}"
}

# Interactive model selection
select_model_interactive() {
    local action="$1"
    
    echo "Available models:" >&2
    local -a models
    mapfile -t models < <(get_aliases_from_config | sort -u)  # Remove duplicates
    
    if [[ ${#models[@]} -eq 0 ]]; then
        die "No models configured. Use 'llm add' to add a model first."
    fi
    
    local i=0
    for model in "${models[@]}"; do
        i=$((i + 1))
        echo "  ${i}) ${model}" >&2
    done
    
    echo >&2
    local selection
    read -r -p "Select model [1-${#models[@]}]: " selection >&2
    
    if [[ "${selection}" =~ ^[0-9]+$ ]] && [[ "${selection}" -ge 1 ]] && [[ "${selection}" -le ${#models[@]} ]]; then
        echo "${models[$((selection - 1))]}"
    else
        die "Invalid selection: ${selection}"
    fi
}

# Test model connectivity 
test_model() {
    local alias="${1:-}"
    local endpoint="${2:-/health}"
    
    if [[ -z "${alias}" ]]; then
        alias="$(get_default_alias)"
    fi
    
    log_info "Testing connectivity..."
    print_separator
    
    # Test proxy health
    if check_proxy_health 5; then
        log_info "Proxy health check: PASSED"
    else
        log_error "Proxy health check: FAILED"
        return 1
    fi
    
    # Test specific endpoint if provided
    if [[ "${endpoint}" != "/health" ]]; then
        if check_proxy_health 5 "${endpoint}"; then
            log_info "Endpoint ${endpoint}: PASSED"
        else
            log_error "Endpoint ${endpoint}: FAILED"
            return 1
        fi
    fi
    
    # Test model listing
    if command -v curl >/dev/null 2>&1; then
        local models_response
        models_response="$(curl -s -m 10 "${BASE_URL}/v1/models" 2>/dev/null)" || {
            log_error "Model listing: FAILED"
            return 1
        }
        
        if [[ -n "${models_response}" ]]; then
            log_info "Model listing: PASSED"
        else
            log_warn "Model listing: Empty response"
        fi
    fi
    
    log_info "All tests completed successfully"
}

# Main command processing
main() {
    local cmd="${1:-}"
    shift || true
    
    # Handle global options
    case "${cmd}" in
        -h|--help|help|"")
            usage
            exit 0
            ;;
        -v|--version|version)
            echo "LLM Family Pack v$(get_version)"
            exit 0
            ;;
        -d|--debug)
            export DEBUG=1
            cmd="${1:-}"
            shift || true
            ;;
    esac
    
    # Process commands
    case "${cmd}" in
        start)
            start_service || handle_command_error $? "${cmd}"
            ;;
        stop)
            stop_service || handle_command_error $? "${cmd}"
            ;;
        restart)
            restart_service || handle_command_error $? "${cmd}"
            ;;
        status)
            show_service_status || handle_command_error $? "${cmd}"
            ;;
        logs)
            local lines="${1:-50}"
            show_service_logs "${lines}" || handle_command_error $? "${cmd}"
            ;;
        add)
            add_model_interactive "$@" || handle_command_error $? "${cmd}"
            ;;
        list)
            list_models || handle_command_error $? "${cmd}"
            ;;
        change)
            echo "Select new default model:"
            local selected_model
            selected_model="$(select_model_interactive "change")"
            set_default_alias "${selected_model}" || handle_command_error $? "${cmd}"
            ;;
        delete)
            echo "Select model to delete:"
            local selected_model
            selected_model="$(select_model_interactive "delete")"
            delete_alias "${selected_model}" || handle_command_error $? "${cmd}"
            ;;
        proxy)
            local sub_cmd="${1:-status}"
            shift || true
            case "${sub_cmd}" in
                add)
                    add_proxy "$@" || handle_command_error $? "${cmd} ${sub_cmd}"
                    ;;
                remove)
                    remove_proxy "$@" || handle_command_error $? "${cmd} ${sub_cmd}"
                    ;;
                list)
                    list_proxies || handle_command_error $? "${cmd} ${sub_cmd}"
                    ;;
                switch)
                    switch_proxy "$@" || handle_command_error $? "${cmd} ${sub_cmd}"
                    ;;
                status)
                    show_proxy_status || handle_command_error $? "${cmd} ${sub_cmd}"
                    ;;
                *)
                    log_error "Unknown proxy command: ${sub_cmd}"
                    usage
                    exit 1
                    ;;
            esac
            ;;
        test)
            test_model "$@" || handle_command_error $? "${cmd}"
            ;;
        tidy)
            tidy_config || handle_command_error $? "${cmd}"
            ;;
        clean-duplicates)
            remove_duplicate_models || handle_command_error $? "${cmd}"
            ;;
        show-config)
            if [[ -f "${CFG_FILE}" ]]; then
                cat "${CFG_FILE}"
            else
                die "Configuration file not found: ${CFG_FILE}"
            fi
            ;;
        doctor)
            run_diagnostics || handle_command_error $? "${cmd}"
            ;;
        fix)
            fix_common_issues || handle_command_error $? "${cmd}"
            ;;
        cache)
            local sub_cmd="${1:-}"
            if [[ "${sub_cmd}" == "clear" ]]; then
                rm -rf "${HOME}/.cache/uv" 2>/dev/null || true
                log_info "Cleared uv cache"
            else
                die "Usage: llm cache clear"
            fi
            ;;
        ensure-claude)
            local backing="${1:-qwen coder}"
            local model_tuple
            model_tuple="$(resolve_backing_to_tuple "${backing}")"
            IFS='|' read -r model_id api_base max_tokens <<< "${model_tuple}"
            ensure_claude_aliases "${model_id}" "${api_base}" "${max_tokens}"
            ;;
        auto-claude)
            local backing="${1:-}"
            
            # Try to get backing from environment
            if [[ -z "${backing}" ]] && [[ -f "${ENV_FILE}" ]]; then
                backing="$(get_config_value "CLAUDE_BACKING_ALIAS")"
            fi
            
            # Fall back to default
            if [[ -z "${backing}" ]]; then
                backing="$(get_default_alias)"
            fi
            
            if [[ -z "${backing}" ]]; then
                backing="qwen coder"
            fi
            
            local model_tuple
            model_tuple="$(resolve_backing_to_tuple "${backing}")"
            IFS='|' read -r model_id api_base max_tokens <<< "${model_tuple}"
            ensure_claude_aliases "${model_id}" "${api_base}" "${max_tokens}"
            log_info "Auto-configured Claude aliases using: ${backing}"
            ;;
        *)
            log_error "Unknown command: ${cmd}"
            echo
            usage
            exit 1
            ;;
    esac
}

# Run main function with all arguments
main "$@"
