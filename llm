#!/usr/bin/env bash
set -euo pipefail

CFG_DIR="$HOME/.config/litellm"
CFG="$CFG_DIR/config.yaml"
ENVF="$CFG_DIR/env"
UNIT="litellm.service"
DEFAULT_FILE="$CFG_DIR/default_model"
PORT=4000
BASE="http://127.0.0.1:${PORT}"

usage() {
cat <<USAGE
llm â€” manage LiteLLM proxy and models

Usage:
  llm start|stop|restart|status|logs
  llm add [ALIAS MODEL_ID [API_BASE] [MAX_TOKENS]]
  llm list
  llm change
  llm delete
  llm tidy
  llm show-config
  llm doctor
  llm fix
  llm cache clear
  llm test [ALIAS] ["ping"]
  llm ensure-claude [BACKING_ALIAS_OR_MODEL]
  llm auto-claude [BACKING_ALIAS_OR_MODEL]
USAGE
}

ensure_cfg() {
  mkdir -p "$CFG_DIR"
  [ -f "$CFG" ] || cat > "$CFG" <<'YML'
model_list:
  - model_name: "sonnet 4"
    litellm_params:
      model: openrouter/qwen/qwen3-coder
      api_base: https://openrouter.ai/api/v1
      max_tokens: 8192

litellm_settings: {}

general_settings:
  disable_database: true
YML
}

normalize_alias() {
  local a="$1"
  a="${a//_/ - }"; a="${a//\//-}"; a="$(echo "$a" | tr 'A-Z' 'a-z')"
  if [[ "$a" =~ sonnet[[:space:]-]?4 ]]; then echo "sonnet 4"; return; fi
  if [[ "$a" =~ sonnet[[:space:]-]?3\.?5 ]]; then echo "sonnet 3.5"; return; fi
  if [[ "$a" =~ haiku[[:space:]-]?3\.?5 ]]; then echo "haiku 3.5"; return; fi
  if [[ "$a" =~ opus ]]; then echo "opus"; return; fi
  echo "${a//-/ }"
}

lookup_alias_block() {
  local alias="$1"
  awk -v a="$alias" '
    $0 ~ "^- model_name: \"" a "\""{found=1}
    END{ if(found) exit 0; else exit 1 }
  ' "$CFG"
}

append_or_replace_alias() {
  local alias="$1" model_id="$2" api_base="$3" max_tokens="$4"
  if [[ "$api_base" == *"openrouter.ai"* ]] && [[ "$model_id" != openrouter/* ]]; then
    model_id="openrouter/$model_id"
  fi
  if lookup_alias_block "$alias"; then
    tmp="$(mktemp)"
    awk -v a="$alias" -v mid="$model_id" -v api="$api_base" -v mt="$max_tokens" '
      BEGIN{skip=0}
      {
        if ($0 ~ "^- model_name: \"" a "\"") {
          print $0; getline; print "    litellm_params:";
          print "      model: " mid;
          print "      api_base: " api;
          print "      max_tokens: " mt;
          skip=1; next
        }
        if (skip && $0 ~ "^- model_name: ") { skip=0 }
        if (!skip) print
      }
    ' "$CFG" > "$tmp"
    mv "$tmp" "$CFG"
  else
    tmp="$(mktemp)"
    awk '1' "$CFG" > "$tmp"
    {
      printf '  - model_name: "%s"\n' "$alias"
      printf '    litellm_params:\n'
      printf '      model: %s\n' "$model_id"
      printf '      api_base: %s\n' "$api_base"
      printf '      max_tokens: %s\n' "$max_tokens"
    } >> "$tmp"
    mv "$tmp" "$CFG"
  fi
}

get_aliases_from_cfg() {
  awk '/- model_name:/ {alias=$0; sub(/^[[:space:]]*- model_name:[[:space:]]*"/,"",alias); sub(/"$/,"",alias); print alias}' "$CFG" 2>/dev/null
}

list_models() {
  awk '
    /- model_name:/ {
      alias=$0; sub(/^[[:space:]]*- model_name:[[:space:]]*"/,"",alias); sub(/"$/,"",alias);
      state=1; next
    }
    state && /model:/ { model=$2 }
    state && /api_base:/ { api=$2 }
    state && /max_tokens:/ { mt=$2; printf "\"%s\" -> %s (api_base=%s, max_tokens=%s)\n", alias, model, api, mt; state=0 }
  ' "$CFG" 2>/dev/null
}

default_alias() {
  if [ -f "$DEFAULT_FILE" ]; then cat "$DEFAULT_FILE"; else get_aliases_from_cfg | head -n1; fi
}

resolve_backing_to_tuple() {
  local backing="$1"
  if [[ "$backing" == */* ]] || [[ "$backing" == openrouter/* ]]; then
    echo "$backing|https://openrouter.ai/api/v1|8192"; return
  fi
  local model_id api_base max_tokens
  model_id="$(awk -v a="$backing" '
    $0 ~ "^- model_name: \"" a "\""{state=1; next}
    state && /model:/ {print $2; exit}
  ' "$CFG")"
  api_base="$(awk -v a="$backing" '
    $0 ~ "^- model_name: \"" a "\""{state=1; next}
    state && /api_base:/ {print $2; exit}
  ' "$CFG")"
  max_tokens="$(awk -v a="$backing" '
    $0 ~ "^- model_name: \"" a "\""{state=1; next}
    state && /max_tokens:/ {print $2; exit}
  ' "$CFG")"
  if [ -z "${model_id:-}" ]; then
    echo "openrouter/qwen/qwen3-coder|https://openrouter.ai/api/v1|8192"; return
  fi
  echo "${model_id}|${api_base:-https://openrouter.ai/api/v1}|${max_tokens:-8192}"
}

ensure_double_alias() {
  local model_id="$1" api_base="$2" mt="$3"
  append_or_replace_alias "sonnet 4" "$model_id" "$api_base" "$mt"
  append_or_replace_alias "claude-sonnet-4-20250514" "$model_id" "$api_base" "$mt"
}

ensure_cfg

cmd="${1:-}"; shift || true

case "${cmd}" in
  start) systemctl --user enable "$UNIT" --now ;;
  stop) systemctl --user stop "$UNIT" ;;
  restart) systemctl --user restart "$UNIT" ;;
  status) systemctl --user status "$UNIT" --no-pager ;;
  logs) journalctl --user -u "$UNIT" -n 200 -l --no-pager ;;
  add)
    alias="${1:-}"; model_id="${2:-}"; api_base="${3:-https://openrouter.ai/api/v1}"; mt="${4:-4096}"
    if [ -z "$alias" ] || [ -z "$model_id" ]; then
      echo "Provider? 1) OpenRouter  2) OpenAI  3) Together  4) Fireworks  5) Custom"
      read -r -p "[1-5]: " p
      case "$p" in
        2) api="https://api.openai.com/v1"; keyname="OPENAI_API_KEY";;
        3) api="https://api.together.xyz/v1"; keyname="TOGETHERAI_API_KEY";;
        4) api="https://api.fireworks.ai/inference/v1"; keyname="FIREWORKS_API_KEY";;
        5) read -r -p "Custom api_base: " api; keyname="OPENAI_API_KEY";;
        *) api="https://openrouter.ai/api/v1"; keyname="OPENROUTER_API_KEY";;
      esac
      read -r -p "Alias name (any form; \"sonnet 4\" friendly supported): " alias
      read -r -p "Provider model id (e.g., qwen/qwen3-coder): " model_id
      read -r -p "max_tokens [4096]: " mt; mt="${mt:-4096}"
      api_base="$api"
      if ! grep -q "^${keyname}=" "$ENVF" 2>/dev/null; then
        read -r -s -p "${keyname} not set; paste key: " k; echo
        echo "${keyname}=${k}" >> "$ENVF"; chmod 600 "$ENVF"
        echo "[+] Saved ${keyname} to $ENVF"
      fi
    fi
    alias_norm="$(normalize_alias "$alias")"
    append_or_replace_alias "$alias_norm" "$model_id" "$api_base" "$mt"
    echo "[+] Mapping: \"$alias_norm\" -> $model_id (api_base=$api_base, max_tokens=$mt)"
    ;;
  list) list_models ;;
  change)
    echo "Select default model alias:"
    mapfile -t arr < <(get_aliases_from_cfg)
    i=0; for a in "${arr[@]}"; do i=$((i+1)); echo "  $i) $a"; done
    read -r -p "[1-${#arr[@]}]: " idx
    alias="${arr[$((idx-1))]:-}"
    if [ -n "${alias:-}" ]; then echo "$alias" > "$DEFAULT_FILE"; echo "[+] Default set to: $alias"; else echo "[-] Invalid selection"; fi
    ;;
  delete)
    echo "Select alias to delete:"
    mapfile -t arr < <(get_aliases_from_cfg)
    i=0; for a in "${arr[@]}"; do i=$((i+1)); echo "  $i) $a"; done
    read -r -p "[1-${#arr[@]}]: " idx
    alias="${arr[$((idx-1))]:-}"
    if [ -n "${alias:-}" ]; then
      tmp="$(mktemp)"
      awk -v a="$alias" '
        BEGIN{skip=0}
        {
          if ($0 ~ "^- model_name: \"" a "\"") { skip=1; next }
          if (skip && $0 ~ "^- model_name: ") { skip=0 }
          if (!skip) print
        }
      ' "$CFG" > "$tmp"
      mv "$tmp" "$CFG"
      if [ -f "$DEFAULT_FILE" ] && grep -qx "$alias" "$DEFAULT_FILE"; then rm -f "$DEFAULT_FILE"; fi
      echo "[+] Deleted alias: $alias"
    else
      echo "[-] Invalid selection"
    fi
    ;;
  tidy)
    tmp="$(mktemp)"; sed -E 's/[ \t]+$//' "$CFG" | awk 'NF{print} !NF&&prev==0{print} {prev=NF?1:0}' > "$tmp"; mv "$tmp" "$CFG"
    echo "[=] Tidy complete."
    ;;
  show-config) cat "$CFG" ;;
  doctor)
    echo "== Doctor =="
    systemctl --user status "$UNIT" --no-pager || true
    echo
    if curl -fsS "$BASE/health" >/dev/null 2>&1; then echo "[+] /health OK"; else echo "[-] /health FAILED"; fi
    if curl -fsS "$BASE/health/readiness" >/dev/null 2>&1; then echo "[+] /health/readiness OK"; else echo "[-] /health/readiness FAILED"; fi
    echo
    if command -v ss >/dev/null 2>&1; then ss -ltnp | grep ":${PORT}" || echo "[-] Not listening on :${PORT}"; fi
    echo
    if [ -f "$ENVF" ]; then grep -E '^(OPENROUTER_API_KEY|OPENAI_API_KEY|LITELLM_DISABLE_DB|CLAUDE_BACKING_ALIAS)=' "$ENVF" || echo "[i] No keys set yet."; else echo "[-] Env file missing at $ENVF"; fi
    ;;
  fix) [ -f "$ENVF" ] && chmod 600 "$ENVF" || true; systemctl --user daemon-reload || true ;;
  cache)
    sub="${1:-}"; shift || true
    if [ "$sub" = "clear" ]; then rm -rf "$HOME/.cache/uv" || true; echo "[=] Cleared uv cache (~/.cache/uv)"; else usage; fi
    ;;
  ensure-claude)
    backing="${1:-qwen coder}"
    IFS='|' read -r mid api mt <<<"$(resolve_backing_to_tuple "$backing")"
    ensure_double_alias "$mid" "$api" "$mt"
    echo "[+] Ensured aliases (\"sonnet 4\" & \"claude-sonnet-4-20250514\") -> $mid"
    ;;
  auto-claude)
    backing="${1:-}"
    if [ -z "$backing" ] && [ -f "$ENVF" ]; then
      b="$(grep -E '^CLAUDE_BACKING_ALIAS=' "$ENVF" | tail -n1 | cut -d= -f2-)"
      [ -n "${b:-}" ] && backing="$b" || true
    fi
    [ -n "${backing:-}" ] || backing="$(default_alias)"
    [ -n "${backing:-}" ] || backing="qwen coder"
    IFS='|' read -r mid api mt <<<"$(resolve_backing_to_tuple "$backing")"
    ensure_double_alias "$mid" "$api" "$mt"
    echo "[+] Auto-masked: aliases -> $mid"
    ;;
  test)
    echo "[*] Testing health at $BASE ..."
    if curl -fsS "$BASE/health" >/dev/null 2>&1; then echo "[+] Local proxy healthy."; else echo "[-] Local proxy not healthy."; fi
    ;;
  *) usage ;;
esac
